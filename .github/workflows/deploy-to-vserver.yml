name: Deploy Crater via SSH

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Optional: Verzeichnisballast nicht hochladen (siehe .dockerignore-Hinweis unten)
      - name: Copy project to server via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VSERVER_HOST }}
          username: ${{ secrets.VSERVER_USER }}
          key: ${{ secrets.VSERVER_SSH_KEY }}
          source: "."
          target: "~/crater"
          rm: true
          overwrite: true

      - name: Build and run Docker container via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VSERVER_HOST }}
          username: ${{ secrets.VSERVER_USER }}
          key: ${{ secrets.VSERVER_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            cd ~/crater

            # .env nur anlegen, wenn nicht vorhanden (idempotent)
            if [ ! -f .env ]; then
              cp .env.example .env
            fi

            # Neues CLI verwenden:
            docker compose pull || true
            docker compose up -d --remove-orphans

            # setup.sh ausf√ºhrbar machen + laufen lassen
            chmod +x ./docker-compose/setup.sh
            ./docker-compose/setup.sh

            # Optional sinnvoll: APP_KEY nur generieren, falls leer (falls setup.sh das nicht tut)
            if ! grep -qE '^APP_KEY=.{10,}$' .env; then
              docker compose exec -T app php artisan key:generate
            fi

            # Optional: DB-Migrationen & Cache-Optimierung
            docker compose exec -T app php artisan migrate --force
            docker compose exec -T app php artisan optimize

            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
